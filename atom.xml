<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JuMi&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-03T16:16:26.192Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SnoppDogg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蓝桥-算法题-1</title>
    <link href="http://example.com/2022/04/03/p1/"/>
    <id>http://example.com/2022/04/03/p1/</id>
    <published>2022-04-03T15:38:24.000Z</published>
    <updated>2022-04-03T16:16:26.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Q-1"><a href="#Q-1" class="headerlink" title="Q_1:"></a>Q_1:</h1><p>【问题描述】<br>   你有一架天平。现在你要设计一套砝码，使得利用这些砝码可以称出任意小于等于 N 的正整数重量。<br>   那么这套砝码最少需要包含多少个砝码？<br>   注意砝码可以放在天平两边。</p><p>【输入格式】<br>输入包含一个正整数 N。</p><p>【输出格式】<br>输出一个整数代表答案。</p><p>【样例输入】<br>7</p><p>【样例输出】<br>3</p><p>【样例说明】<br>3 个砝码重量是 1、4、6，可以称出 1 至 7 的所有重量。<br>1 &#x3D; 1；<br>2 &#x3D; 6 − 4 (天平一边放 6，另一边放 4)；<br>3 &#x3D; 4 − 1；<br>4 &#x3D; 4；<br>5 &#x3D; 6 − 1；<br>6 &#x3D; 6；<br>7 &#x3D; 1 + 6；</p><p>少于 3 个砝码不可能称出 1 至 7 的所有重量。解析<br>结果应该是最少的砝码数量<br>首先，如果要称的重量为1的话，只能选择重量为1的砝码，1是必选的一个砝码。</p><p>然后再称比1重的，反正都是要再加砝码，那我们为何不选一个能称的重量尽可能大的呢。类似于贪心算法<br>选1、2的砝码可以满足1&#x3D;1，2&#x3D;2，1+2&#x3D;3<br>选1、3的砝码可以满足1&#x3D;1，2&#x3D;3-1，3&#x3D;3，4&#x3D;3+1<br>选1、4的砝码可以满足1&#x3D;1，2&#x3D;？无法称2，不合题意<br>因此我们选择的砝码组合是1、3，此时我们可以称的最大重量为4</p><p>当我们还需要再增加砝码时<br>同理可得<br>选1、3、9的组合可以满足小于等于13（13&#x3D;1+3+9）的所有重量</p><p>从中可以发现一个规律，当我们需要第三个砝码是，前两个砝码（1、3）满足的最大重量已经是4了，下一个要满足的重量是5，我们遵循砝码尽可能大的原则，选择的第三个砝码的重量满足的条件是：它减去 已经可以称得的最大重量 可以得到 下一个需要称的重量。也就是weight - 4 &#x3D; 5，可得weight为9。</p><p>以上为<a href="https://blog.csdn.net/Striver00/article/details/116031667">(160条消息) 第十二届蓝桥杯省赛JavaB组 试题 G: 最少砝码_小小风0的博客-CSDN博客_最少砝码java</a></p><p>自己的理解：我们由已经拥有的砝码可以得出可以称出的重量范围，当到最大的重量不在能称出需要的重量的时，我们就用想称出的下一个重量加上现在已经能够称出的最大重量，类似于贪心算法，选一个最大的。</p><p>再往下推，可以得到下面的表格</p><table><thead><tr><th>砝码序号</th><th>砝码重量</th><th>总重量(可称出的最大重量)</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>3</td><td>4</td></tr><tr><td>3</td><td>9</td><td>13</td></tr><tr><td>4</td><td>27</td><td>40</td></tr><tr><td>…</td><td>…</td><td>…</td></tr><tr><td>count&#x3D;count+1</td><td>weight&#x3D;weight*3</td><td>total&#x3D;total+weight</td></tr></tbody></table><p>得到规律：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count++;<span class="comment">//count=count+1</span></span><br><span class="line">weight*=<span class="number">3</span>;<span class="comment">//weight=weight*3</span></span><br><span class="line">total+=weight;<span class="comment">//total=total+weight</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WPPStart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PROJECT</span>_NAME:javaPUPU</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:2022-04-03-22:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESCRIPTION</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 砝码统计 &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            sc.close();</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (total &lt; n) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                weight *= <span class="number">3</span>;</span><br><span class="line">                total += weight;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="Q-2"><a href="#Q-2" class="headerlink" title="Q_2"></a>Q_2</h1><p>【问题描述】给定一个长度为 N<em>N</em> 的数列，A_1, A_2, \cdots A_N<em>A</em>1,<em>A</em>2,⋯<em>A**N</em>，如果其中一段连续的子序列 A_i,A_i+1, \cdots A_j<em>A**i</em>,<em>A**i</em>+1,⋯<em>A**j</em> ( i \leq j<em>i</em>≤<em>j</em> ) 之和是 K<em>K</em> 的倍数，我们就称这个区间 [i, j][<em>i</em>,<em>j</em>] 是 K 倍区间。</p><p>你能求出数列中总共有多少个 K<em>K</em> 倍区间吗？</p><p>【输入格式】第一行包含两个整数 N<em>N</em> 和 K<em>K</em>( 1 \leq N,K \leq 10^51≤<em>N</em>,<em>K</em>≤105 )。</p><p>以下 N 行每行包含一个整数 A_i<em>A**i</em> ( 1 \leq A_i \leq 10^51≤<em>A**i</em>≤105 )。</p><p>【输出格式】<br>输出一个整数，代表 K 倍区间的数目。</p><p>【样例输入】<br>5  2 </p><p> 1</p><p> 2</p><p> 3</p><p> 4</p><p> 5</p><p>【样例输出】<br>6</p><p><strong>题目思路</strong><br>　　求区间[l,r]的和是k的倍数的个数。求区间和，我们可以通过前缀和来求出。我们规定sum[i]表示第1个元素到第i个元素的和。那么sum[r] - sum[l-1]就是区间[l,r]的和。区间[l,r]的和是k的倍数即**(sum[r] - sum[l-1])%k &#x3D;&#x3D; 0 即sum[r]%k &#x3D;&#x3D; sum[l-1]%k**<br>　　那么，我们求出每个前缀和，在求的过程中取模，两个相等的前缀和就能组成一个k倍区间。我们可以在计算完前缀和以后，使用两层for循环来计数k倍区间的个数。但是由于数据量较大，这样是会超时的。那么我们是否能在计算前缀和的过程中来记录k倍区间的个数呢？<br>我们用一个数组cnt[i]表示当前位置之前，前缀和取模后等于i的个数。举个例子：<br>　　数列 1 2 3 4 5  mod &#x3D; 2<br>　　对前1个数的和取模， 为1 之前有0个前缀和取模后为1，个数+0<br>　　对前2个数的和取模， 为1 之前有1个前缀和取模后为1，个数+1<br>　　对前3个数的和取模， 为0 之前有0个前缀和取模后为0, 个数+0<br>　　对前4个数的和取模， 为0 之前有1个前缀和取模后为0，个数+1<br>　　对钱5个数的和取模， 为1 之前有2个前缀和取模后为1，个数+2<br>　　到目前为止ans &#x3D; 4。但是ans应该等于6，因为这样计算后，我们漏掉了前i个数的和取模是k的倍数的情况，即[0,i]区间和是k的倍数，因此，我们要在ans &#x3D; 4 的基础上 加上前缀和取模后为0的个数 即ans+2 &#x3D; 6;</p><p><strong>上面的题解看懂的话，就不用看下面的这部分了。下面是用自己的话转化成自己的理解，也方便自己在以后重新翻阅博客的时候，能够快速重新学习。</strong><br>　　举个简单的例子，比如测试样例为：<br>　　6 3</p><p>　　1 3 4 5 8 9<br>　　那么正确的答案应该是6。前缀和的解题思想主要就是再遍历输入数据的时候，把数组的前缀和%k（为什么要对k取余，上面的解题思路就写的很好理解）之后保存到数组sum里面，那么 1 3 4 5 8 9，取完前缀和并%k之后就是 1 1 2 1 0 0。数组中的后面两个0，不难理解就是前缀和%k为0的组合，也就是说，sum[i] &#x3D;&#x3D; 0的，都是满足条件的。接下来再统计相同sum[i]的组合。相同sum[i]的意思就是在求的过程中取模，两个相等的前缀和就能组成一个k倍区间。比如前两个1之间，sum[r]-sum[l-1]之间的数%k&#x3D;&#x3D;0（就是3%3&#x3D;&#x3D;0）。所以用另外的一个数组cnt来保存同样的sum[i]的个数值，用ans一直递加sum[i]相同个数的组合，后面再加上cnt<a href="h:%25k==0">0</a>的个数就是答案了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WPPStart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PROJECT</span>_NAME:javaPUPU</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:2022-04-03-22:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESCRIPTION</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">k</span>倍区间 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> N=input.nextInt();</span><br><span class="line">        <span class="type">int</span> K=input.nextInt();</span><br><span class="line">        <span class="type">int</span> count[]=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">1000001</span>];</span><br><span class="line">        <span class="type">int</span> arr[]=<span class="keyword">new</span> <span class="title class_">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> s[]=<span class="keyword">new</span> <span class="title class_">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            arr[i]=input.nextInt();</span><br><span class="line">            s[i]=s[i-<span class="number">1</span>]+arr[i];    <span class="comment">//计算前缀和</span></span><br><span class="line">            s[i]%=K;      <span class="comment">//在这里直接对前缀和取摸</span></span><br><span class="line">        &#125;</span><br><span class="line">        count[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> anscount=<span class="number">0</span>;  <span class="comment">//int 会爆掉</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            anscount+=count[s[i]];<span class="comment">//除了count[0]=1,其余的初始值都为0，</span></span><br><span class="line">            count[s[i]]++;       <span class="comment">//如果出现过一次后加1，出现过两次及以上，anscount++,</span></span><br><span class="line">            <span class="comment">//我们就是要找总共有多少对,</span></span><br><span class="line">            <span class="comment">//只出现一次虽然count[i]加1但总的答案不会加</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(anscount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Q-1&quot;&gt;&lt;a href=&quot;#Q-1&quot; class=&quot;headerlink&quot; title=&quot;Q_1:&quot;&gt;&lt;/a&gt;Q_1:&lt;/h1&gt;&lt;p&gt;【问题描述】&lt;br&gt;   你有一架天平。现在你要设计一套砝码，使得利用这些砝码可以称出任意小于等于 N 的正整数重量。&lt;br&gt; </summary>
      
    
    
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu20.04安装部署Fabric v1.4.0 — 单机部署</title>
    <link href="http://example.com/2022/03/28/Ubuntu20.04%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Fabric%20v1.4.0%20%E2%80%94%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/03/28/Ubuntu20.04%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Fabric%20v1.4.0%20%E2%80%94%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2022-03-28T10:21:03.000Z</published>
    <updated>2022-03-28T15:43:29.578Z</updated>
    
    <content type="html"><![CDATA[<pre><code>总体来说还是得遇到点坑，自己装会熟练很多，很多问题在遇到解决完以后就更容易理解了</code></pre><h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><h3 id="1-Docker和Docker-Compose安装"><a href="#1-Docker和Docker-Compose安装" class="headerlink" title="1. Docker和Docker Compose安装"></a>1. Docker和Docker Compose安装</h3><p><a href="https://www.docker.com/get-started">Docker</a> : 17.06.2-ce及其以上版本，Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口<br><a href="https://docs.docker.com/compose/overview/">Docker Compose</a> : 1.14.0及其以上版本，使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具</p><p>1.1 安装Docker(参考<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Get Docker CE for Ubuntu</a>)</p><p>由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure><p>更新apt包索引：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装软件包以允许apt通过HTTPS使用存储库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><p>添加Docker官方的GPG密钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>使用下面的命令来设置stable存储库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>再更新一下apt包索引：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装最新版本的Docker CE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此步骤耗时</span></span><br><span class="line">sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>验证docker,查看docker服务是否启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>若未启动，则启动docker服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>经典的hello world：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>1.2 安装Docker Compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Docker Compose二进制文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!下载特别慢  后来下载速度为0</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备用：curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span> </span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="2-Go安装"><a href="#2-Go安装" class="headerlink" title="2. Go安装"></a>2. Go安装</h3><p><a href="https://golang.org/dl/">Go</a> : 1.11.x，Fabric系统是用Go语言开发的，编译Fabric需要Go环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载go1.11.linux-amd64.tar.gz并将其解压到指定目录（此处为/usr/local）</span></span><br><span class="line">wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz</span><br><span class="line">tar xzvf go1.11.linux-amd64.tar.gz -C /usr/local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建<span class="variable">$GOPATH</span></span></span><br><span class="line">mkdir /home/ubuntu</span><br><span class="line">mkdir /home/ubuntu/gopath</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容如下所示：</span></span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOARCH=amd64</span><br><span class="line">export GOOS=linux</span><br><span class="line">export GOPATH=/home/ubuntu/gopath</span><br><span class="line">export GOBIN=$GOPATH/bin</span><br><span class="line">export PATH=$GOPATH/bin:$GOROOT/bin:$PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看gobanben</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="3-host文件配置"><a href="#3-host文件配置" class="headerlink" title="3. host文件配置"></a>3. host文件配置</h3><p>因为Fabric节点通信中不支持使用ip进行访问，所以只能修改host映射区块链网络的域名example.com。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1        orderer.example.com peer0.org1.example.com peer1.org1.example.com peer0.org2.example.com peer1.org2.example.com</span><br></pre></td></tr></table></figure><h2 id="二、Fabric在线安装"><a href="#二、Fabric在线安装" class="headerlink" title="二、Fabric在线安装"></a>二、Fabric在线安装</h2><p><strong>以下所有操作使用root用户操作</strong>，如果没有root账户需要手动启用。</p><h3 id="1-下载fabric-samples源文件"><a href="#1-下载fabric-samples源文件" class="headerlink" title="1. 下载fabric-samples源文件"></a>1. 下载fabric-samples源文件</h3><p>将fabric-samples下载到<code>$GOPATH/src/github.com/hyperledger</code>目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/github.com/hyperledger</span><br><span class="line">cd $GOPATH/src/github.com/hyperledger</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆fabric-samples项目并切换到v1.4tag</span></span><br><span class="line">git clone https://github.com/hyperledger/fabric-samples.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备用 ： https://gitee.com/hbuzzs/fabric-samples.git</span></span><br><span class="line">cd fabric-samples</span><br><span class="line">git checkout -b sample v1.4.0</span><br></pre></td></tr></table></figure><h3 id="2-手动安装Fabric-Binaries和Fabric相关的Docker镜像"><a href="#2-手动安装Fabric-Binaries和Fabric相关的Docker镜像" class="headerlink" title="2. 手动安装Fabric Binaries和Fabric相关的Docker镜像"></a>2. 手动安装Fabric Binaries和Fabric相关的Docker镜像</h3><p>将指定版本的Hyperledger Fabric特定于平台的二进制文件和配置文件安装到fabric-samples的bin和config目录中</p><p>下载压缩包文件上传到Ubuntu</p><ul><li><a href="https://www.123pan.com/s/XkRRVv-6uIk3">hyperledger-fabric-linux-amd64-1.4.0.tar.gz</a></li><li><a href="https://www.123pan.com/s/XkRRVv-yuIk3">hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz</a></li></ul><p>接着切换到压缩包所在目录执行解压命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf hyperledger-fabric-linux-amd64-1.4.0.tar.gz -C $GOPATH/src/github.com/hyperledger/fabric-samples/</span><br><span class="line">tar xzvf hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz -C $GOPATH/src/github.com/hyperledger/fabric-samples/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向/etc/profile中写入环境变量</span></span><br><span class="line">sudo echo &#x27;export PATH=$GOPATH/src/github.com/hyperledger/fabric-samples/bin:$PATH&#x27; &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>下载相关Docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Fabric相关镜像（fabric-peer、fabric-orderer、fabric-ccenv、fabric-tools）</span></span><br><span class="line">docker pull hyperledger/fabric-peer:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-peer:1.4.0 hyperledger/fabric-peer:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-orderer:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-orderer:1.4.0 hyperledger/fabric-orderer:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-ccenv:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-ccenv:1.4.0 hyperledger/fabric-ccenv:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-tools:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-tools:1.4.0 hyperledger/fabric-tools:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Fabric第三方镜像（fabric-couchdb、fabric-kafka、fabric-zookeeper）</span></span><br><span class="line">docker pull hyperledger/fabric-couchdb:0.4.14</span><br><span class="line">docker tag hyperledger/fabric-couchdb:0.4.14 hyperledger/fabric-couchdb:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-kafka:0.4.14</span><br><span class="line">docker tag hyperledger/fabric-kafka:0.4.14 hyperledger/fabric-kafka:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-zookeeper:0.4.14</span><br><span class="line">docker tag hyperledger/fabric-zookeeper:0.4.14 hyperledger/fabric-zookeeper:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Fabric CA镜像</span></span><br><span class="line">docker pull hyperledger/fabric-ca:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-ca:1.4.0 hyperledger/fabric-ca:latest</span><br></pre></td></tr></table></figure><h3 id="3-通过运行Build-your-first-network样例来进行测试"><a href="#3-通过运行Build-your-first-network样例来进行测试" class="headerlink" title="3. 通过运行Build your first network样例来进行测试"></a>3. 通过运行Build your first network样例来进行测试</h3><p>启动网络验证是否正常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动方式一：编译通过Golang开发的chaincode并启动相关的容器</span></span><br><span class="line">./byfn.sh up</span><br></pre></td></tr></table></figure><p>验证正常后关闭网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭Fabric方式一：停止first-network网络中所有的容器，删除crypto材料和4个artifacts（genesis.block、mychannel.block、Org1MSPanchor.tx、Org2MSPanchor.tx）以及chaincode镜像</span></span><br><span class="line">./byfn.sh down</span><br></pre></td></tr></table></figure><h3 id="4-测试通过后通过docker-compose启动"><a href="#4-测试通过后通过docker-compose启动" class="headerlink" title="4. 测试通过后通过docker-compose启动"></a>4. 测试通过后通过docker-compose启动</h3><p>第一次执行需要初始化证书文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line">./byfn.sh generate</span><br></pre></td></tr></table></figure><p>启动网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动order、peer、ca节点</span></span><br><span class="line">docker-compose -f docker-compose-e2e.yaml up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动cli节点</span></span><br><span class="line">docker-compose -f docker-compose-cli.yaml up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建通道和部署测试合约（如果执行过就不用再执行了）</span></span><br><span class="line">docker exec cli scripts/script.sh mychannel 3 golang 10 false</span><br></pre></td></tr></table></figure><p>关闭网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭order、peer、ca节点</span></span><br><span class="line">docker-compose -f docker-compose-e2e.yaml down</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭cli节点</span></span><br><span class="line">docker-compose -f docker-compose-cli.yaml down</span><br></pre></td></tr></table></figure><ol><li><p>​    前面基本没有什么好说的，按照博主的步骤一步一步来会好很多，别自己跳步骤。</p></li><li><p>在用bootstrap.脚本安装脚本大多数情况会出错，就需要我们自己手动来完成bootstrap的几项工作，即bootstrap.sh帮我们干了什么事：</p><ol><li>如果在当前目录中没有 <code>hyperledger/fabric-samples</code>，则从 <code>github.com</code> 克隆 <code>hyperledger/fabric-samples</code> 存储库</li><li>使用 <code>checkout</code> 签出对应指定的版本标签</li><li>将指定版本的Hyperledger Fabric平台特定的二进制文件和配置文件安装到 <code>fabric-samples</code> 存储库的根目录中</li><li>下载指定版本的 <code>Hyperledger Fabric docker</code> 镜像文件</li><li>将下载的 docker 镜像文件标记为 “latest”</li></ol></li><li><p>首先将二进制文件和配置文件安装到fabric-samples的bin和config目录中，按照博主的给的链接下载，传到自己的运行主机当中，解压到$GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;中即可。注意在下载相关Docker镜像的时候版本要与sample的所需的版本一致，版本不一致会导致链接不成功，拉取镜像后都要进行重命名：latest，如此操作。每次重新启动网络时，都要<code>./byfn.sh down</code>删除所有数据，然后再启动网络。</p></li><li><p>到最后可能有一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: error getting chaincode deployment spec for mycc: error getting chaincode package bytes: failed to calculate dependencies: incomplete package: github.com/hyperledger/fabric/core/chaincode/shim</span><br><span class="line">!!!!!!!!!!!!!!! Chaincode installation on peer0.org1 has failed !!!!!!!!!!!!!!!!</span><br><span class="line">========= ERROR !!! FAILED to execute End-2-End Scenario ===========</span><br></pre></td></tr></table></figure><p>跟脚本代码是从（<a href="https://github.com/hyperledger/fabric-samples/blob/1343ccb6282e4ecab23ccdba0d1b2158cf7dfd55/first-network/scripts/utils.sh#L126">github</a>）以下逻辑报出的，意思讲以下依赖未找到（<a href="https://github.com/hyperledger/fabric-samples/blob/1343ccb6282e4ecab23ccdba0d1b2158cf7dfd55/chaincode/chaincode_example02/go/chaincode_example02.go#L29">github</a>），或许是仓库分支代码，<code>release-1.4</code>是有的，最新的<code>master</code>分支已经删掉了，可以考虑更新下新版的依赖，但是后来感觉也不是这个问题。。。。,可以参考<a href="https://www.bcskill.com/index.php/archives/925.html%EF%BC%8C%E6%9C%80%E5%90%8E%E6%88%91%E6%B2%A1%E6%9C%89%E6%8D%A2%E4%BE%9D%E8%B5%96%EF%BC%8C%E5%9C%A8%E5%8D%9A%E4%B8%BB%E5%B8%AE%E5%8A%A9%E4%B8%8B%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%98%AFdocker">https://www.bcskill.com/index.php/archives/925.html，最后我没有换依赖，在博主帮助下，发现是docker</a> 镜像版本的问题，修改后配置成功了，遇到问题检查下前面的步骤有没有和文中一致，祝你好运！</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;总体来说还是得遇到点坑，自己装会熟练很多，很多问题在遇到解决完以后就更容易理解了
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;一、环境安装&quot;&gt;&lt;a href=&quot;#一、环境安装&quot; class=&quot;headerlink&quot; title=&quot;一、环境安装&quot;&gt;&lt;/a&gt;一、</summary>
      
    
    
    
    
    <category term="Fabric" scheme="http://example.com/tags/Fabric/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/03/28/hello-world/"/>
    <id>http://example.com/2022/03/28/hello-world/</id>
    <published>2022-03-28T07:40:00.828Z</published>
    <updated>2022-03-28T07:40:00.828Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
