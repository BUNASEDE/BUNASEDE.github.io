<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JuMi&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-28T15:43:29.578Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SnoppDogg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu20.04安装部署Fabric v1.4.0 — 单机部署</title>
    <link href="http://example.com/2022/03/28/Ubuntu20.04%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Fabric%20v1.4.0%20%E2%80%94%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/03/28/Ubuntu20.04%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Fabric%20v1.4.0%20%E2%80%94%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2022-03-28T10:21:03.000Z</published>
    <updated>2022-03-28T15:43:29.578Z</updated>
    
    <content type="html"><![CDATA[<pre><code>总体来说还是得遇到点坑，自己装会熟练很多，很多问题在遇到解决完以后就更容易理解了</code></pre><h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><h3 id="1-Docker和Docker-Compose安装"><a href="#1-Docker和Docker-Compose安装" class="headerlink" title="1. Docker和Docker Compose安装"></a>1. Docker和Docker Compose安装</h3><p><a href="https://www.docker.com/get-started">Docker</a> : 17.06.2-ce及其以上版本，Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口<br><a href="https://docs.docker.com/compose/overview/">Docker Compose</a> : 1.14.0及其以上版本，使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具</p><p>1.1 安装Docker(参考<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Get Docker CE for Ubuntu</a>)</p><p>由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure><p>更新apt包索引：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装软件包以允许apt通过HTTPS使用存储库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><p>添加Docker官方的GPG密钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>使用下面的命令来设置stable存储库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>再更新一下apt包索引：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装最新版本的Docker CE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此步骤耗时</span></span><br><span class="line">sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>验证docker,查看docker服务是否启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>若未启动，则启动docker服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>经典的hello world：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>1.2 安装Docker Compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Docker Compose二进制文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!下载特别慢  后来下载速度为0</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备用：curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span> </span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="2-Go安装"><a href="#2-Go安装" class="headerlink" title="2. Go安装"></a>2. Go安装</h3><p><a href="https://golang.org/dl/">Go</a> : 1.11.x，Fabric系统是用Go语言开发的，编译Fabric需要Go环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载go1.11.linux-amd64.tar.gz并将其解压到指定目录（此处为/usr/local）</span></span><br><span class="line">wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz</span><br><span class="line">tar xzvf go1.11.linux-amd64.tar.gz -C /usr/local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建<span class="variable">$GOPATH</span></span></span><br><span class="line">mkdir /home/ubuntu</span><br><span class="line">mkdir /home/ubuntu/gopath</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容如下所示：</span></span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOARCH=amd64</span><br><span class="line">export GOOS=linux</span><br><span class="line">export GOPATH=/home/ubuntu/gopath</span><br><span class="line">export GOBIN=$GOPATH/bin</span><br><span class="line">export PATH=$GOPATH/bin:$GOROOT/bin:$PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看gobanben</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="3-host文件配置"><a href="#3-host文件配置" class="headerlink" title="3. host文件配置"></a>3. host文件配置</h3><p>因为Fabric节点通信中不支持使用ip进行访问，所以只能修改host映射区块链网络的域名example.com。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1        orderer.example.com peer0.org1.example.com peer1.org1.example.com peer0.org2.example.com peer1.org2.example.com</span><br></pre></td></tr></table></figure><h2 id="二、Fabric在线安装"><a href="#二、Fabric在线安装" class="headerlink" title="二、Fabric在线安装"></a>二、Fabric在线安装</h2><p><strong>以下所有操作使用root用户操作</strong>，如果没有root账户需要手动启用。</p><h3 id="1-下载fabric-samples源文件"><a href="#1-下载fabric-samples源文件" class="headerlink" title="1. 下载fabric-samples源文件"></a>1. 下载fabric-samples源文件</h3><p>将fabric-samples下载到<code>$GOPATH/src/github.com/hyperledger</code>目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/github.com/hyperledger</span><br><span class="line">cd $GOPATH/src/github.com/hyperledger</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆fabric-samples项目并切换到v1.4tag</span></span><br><span class="line">git clone https://github.com/hyperledger/fabric-samples.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备用 ： https://gitee.com/hbuzzs/fabric-samples.git</span></span><br><span class="line">cd fabric-samples</span><br><span class="line">git checkout -b sample v1.4.0</span><br></pre></td></tr></table></figure><h3 id="2-手动安装Fabric-Binaries和Fabric相关的Docker镜像"><a href="#2-手动安装Fabric-Binaries和Fabric相关的Docker镜像" class="headerlink" title="2. 手动安装Fabric Binaries和Fabric相关的Docker镜像"></a>2. 手动安装Fabric Binaries和Fabric相关的Docker镜像</h3><p>将指定版本的Hyperledger Fabric特定于平台的二进制文件和配置文件安装到fabric-samples的bin和config目录中</p><p>下载压缩包文件上传到Ubuntu</p><ul><li><a href="https://www.123pan.com/s/XkRRVv-6uIk3">hyperledger-fabric-linux-amd64-1.4.0.tar.gz</a></li><li><a href="https://www.123pan.com/s/XkRRVv-yuIk3">hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz</a></li></ul><p>接着切换到压缩包所在目录执行解压命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf hyperledger-fabric-linux-amd64-1.4.0.tar.gz -C $GOPATH/src/github.com/hyperledger/fabric-samples/</span><br><span class="line">tar xzvf hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz -C $GOPATH/src/github.com/hyperledger/fabric-samples/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向/etc/profile中写入环境变量</span></span><br><span class="line">sudo echo &#x27;export PATH=$GOPATH/src/github.com/hyperledger/fabric-samples/bin:$PATH&#x27; &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>下载相关Docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Fabric相关镜像（fabric-peer、fabric-orderer、fabric-ccenv、fabric-tools）</span></span><br><span class="line">docker pull hyperledger/fabric-peer:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-peer:1.4.0 hyperledger/fabric-peer:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-orderer:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-orderer:1.4.0 hyperledger/fabric-orderer:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-ccenv:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-ccenv:1.4.0 hyperledger/fabric-ccenv:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-tools:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-tools:1.4.0 hyperledger/fabric-tools:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Fabric第三方镜像（fabric-couchdb、fabric-kafka、fabric-zookeeper）</span></span><br><span class="line">docker pull hyperledger/fabric-couchdb:0.4.14</span><br><span class="line">docker tag hyperledger/fabric-couchdb:0.4.14 hyperledger/fabric-couchdb:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-kafka:0.4.14</span><br><span class="line">docker tag hyperledger/fabric-kafka:0.4.14 hyperledger/fabric-kafka:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">------------------------------------------</span></span><br><span class="line">docker pull hyperledger/fabric-zookeeper:0.4.14</span><br><span class="line">docker tag hyperledger/fabric-zookeeper:0.4.14 hyperledger/fabric-zookeeper:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Fabric CA镜像</span></span><br><span class="line">docker pull hyperledger/fabric-ca:1.4.0</span><br><span class="line">docker tag hyperledger/fabric-ca:1.4.0 hyperledger/fabric-ca:latest</span><br></pre></td></tr></table></figure><h3 id="3-通过运行Build-your-first-network样例来进行测试"><a href="#3-通过运行Build-your-first-network样例来进行测试" class="headerlink" title="3. 通过运行Build your first network样例来进行测试"></a>3. 通过运行Build your first network样例来进行测试</h3><p>启动网络验证是否正常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动方式一：编译通过Golang开发的chaincode并启动相关的容器</span></span><br><span class="line">./byfn.sh up</span><br></pre></td></tr></table></figure><p>验证正常后关闭网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭Fabric方式一：停止first-network网络中所有的容器，删除crypto材料和4个artifacts（genesis.block、mychannel.block、Org1MSPanchor.tx、Org2MSPanchor.tx）以及chaincode镜像</span></span><br><span class="line">./byfn.sh down</span><br></pre></td></tr></table></figure><h3 id="4-测试通过后通过docker-compose启动"><a href="#4-测试通过后通过docker-compose启动" class="headerlink" title="4. 测试通过后通过docker-compose启动"></a>4. 测试通过后通过docker-compose启动</h3><p>第一次执行需要初始化证书文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line">./byfn.sh generate</span><br></pre></td></tr></table></figure><p>启动网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动order、peer、ca节点</span></span><br><span class="line">docker-compose -f docker-compose-e2e.yaml up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动cli节点</span></span><br><span class="line">docker-compose -f docker-compose-cli.yaml up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建通道和部署测试合约（如果执行过就不用再执行了）</span></span><br><span class="line">docker exec cli scripts/script.sh mychannel 3 golang 10 false</span><br></pre></td></tr></table></figure><p>关闭网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭order、peer、ca节点</span></span><br><span class="line">docker-compose -f docker-compose-e2e.yaml down</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭cli节点</span></span><br><span class="line">docker-compose -f docker-compose-cli.yaml down</span><br></pre></td></tr></table></figure><ol><li><p>​    前面基本没有什么好说的，按照博主的步骤一步一步来会好很多，别自己跳步骤。</p></li><li><p>在用bootstrap.脚本安装脚本大多数情况会出错，就需要我们自己手动来完成bootstrap的几项工作，即bootstrap.sh帮我们干了什么事：</p><ol><li>如果在当前目录中没有 <code>hyperledger/fabric-samples</code>，则从 <code>github.com</code> 克隆 <code>hyperledger/fabric-samples</code> 存储库</li><li>使用 <code>checkout</code> 签出对应指定的版本标签</li><li>将指定版本的Hyperledger Fabric平台特定的二进制文件和配置文件安装到 <code>fabric-samples</code> 存储库的根目录中</li><li>下载指定版本的 <code>Hyperledger Fabric docker</code> 镜像文件</li><li>将下载的 docker 镜像文件标记为 “latest”</li></ol></li><li><p>首先将二进制文件和配置文件安装到fabric-samples的bin和config目录中，按照博主的给的链接下载，传到自己的运行主机当中，解压到$GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples&#x2F;中即可。注意在下载相关Docker镜像的时候版本要与sample的所需的版本一致，版本不一致会导致链接不成功，拉取镜像后都要进行重命名：latest，如此操作。每次重新启动网络时，都要<code>./byfn.sh down</code>删除所有数据，然后再启动网络。</p></li><li><p>到最后可能有一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: error getting chaincode deployment spec for mycc: error getting chaincode package bytes: failed to calculate dependencies: incomplete package: github.com/hyperledger/fabric/core/chaincode/shim</span><br><span class="line">!!!!!!!!!!!!!!! Chaincode installation on peer0.org1 has failed !!!!!!!!!!!!!!!!</span><br><span class="line">========= ERROR !!! FAILED to execute End-2-End Scenario ===========</span><br></pre></td></tr></table></figure><p>跟脚本代码是从（<a href="https://github.com/hyperledger/fabric-samples/blob/1343ccb6282e4ecab23ccdba0d1b2158cf7dfd55/first-network/scripts/utils.sh#L126">github</a>）以下逻辑报出的，意思讲以下依赖未找到（<a href="https://github.com/hyperledger/fabric-samples/blob/1343ccb6282e4ecab23ccdba0d1b2158cf7dfd55/chaincode/chaincode_example02/go/chaincode_example02.go#L29">github</a>），或许是仓库分支代码，<code>release-1.4</code>是有的，最新的<code>master</code>分支已经删掉了，可以考虑更新下新版的依赖，但是后来感觉也不是这个问题。。。。,可以参考<a href="https://www.bcskill.com/index.php/archives/925.html%EF%BC%8C%E6%9C%80%E5%90%8E%E6%88%91%E6%B2%A1%E6%9C%89%E6%8D%A2%E4%BE%9D%E8%B5%96%EF%BC%8C%E5%9C%A8%E5%8D%9A%E4%B8%BB%E5%B8%AE%E5%8A%A9%E4%B8%8B%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%98%AFdocker">https://www.bcskill.com/index.php/archives/925.html，最后我没有换依赖，在博主帮助下，发现是docker</a> 镜像版本的问题，修改后配置成功了，遇到问题检查下前面的步骤有没有和文中一致，祝你好运！</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;总体来说还是得遇到点坑，自己装会熟练很多，很多问题在遇到解决完以后就更容易理解了
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;一、环境安装&quot;&gt;&lt;a href=&quot;#一、环境安装&quot; class=&quot;headerlink&quot; title=&quot;一、环境安装&quot;&gt;&lt;/a&gt;一、</summary>
      
    
    
    
    
    <category term="Fabric" scheme="http://example.com/tags/Fabric/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/03/28/hello-world/"/>
    <id>http://example.com/2022/03/28/hello-world/</id>
    <published>2022-03-28T07:40:00.828Z</published>
    <updated>2022-03-28T07:40:00.828Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
